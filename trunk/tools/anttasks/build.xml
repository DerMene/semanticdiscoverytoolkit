<project name="sd.anttasks" default="dist" basedir=".">

  <!-- set global properties for this build -->
  <property name="build" value="build"/>
  <property name="src" value="src/java"/>
  <property name="classes" value="${build}/classes"/>
  <property name="reports" value="${build}/reports"/>
  <property name="docs" value="${build}/doc"/>
  <property name="lib" value="jars"/>
  <property name="dist" value="../../core/jars/ext"/>
	<property name="jar" value="sd-anttasks"/>
  <property name="junit.test.src" value="src/test/junit"/>
  <property name="junit.test.classes" value="${build}/junit-test-classes"/>

  <path id="project.class.path">
		<!-- reference project classes and tests -->
    <pathelement location="${classes}"/>
    <pathelement location="${junit.test.classes}"/>

		<!-- reference dependent jars -->
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <target name="print-classpath">
    <pathconvert property="classpath.property" refid="project.class.path"/>
    <echo message="CLASSPATH IS: ${classpath.property}"/>
  </target>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp>
      <!--format property="buildNumber" pattern="yyyyMMddHHmmss" /-->
      <format property="buildNumber" pattern="yyyy-MM-dd" />
    </tstamp>
    <tstamp>
      <format property="copyright.year" pattern="yyyy" />
    </tstamp>
  </target>

  <target name="compile" depends="init">
    <mkdir dir="${classes}"/>
    <!-- Compile the java code from ${src} into ${classes} -->
    <javac srcdir="${src}" destdir="${classes}"
           debug="on" source="1.6" encoding="utf-8">
      <classpath refid="project.class.path"/>
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <target name="compile-junit-test" depends="init">
    <mkdir dir="${junit.test.classes}"/>
    <!-- Compile the java code from ${src} into ${classes} -->
    <javac srcdir="${junit.test.src}" destdir="${junit.test.classes}"
           debug="on" source="1.6" encoding="utf-8">
      <classpath refid="project.class.path"/>
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <target name="copy-source-resources">
    <mkdir dir="${classes}"/>
    <copy todir="${classes}">
      <fileset dir="${src}">
        <include name="**/*.txt"/>
        <include name="**/*.arff"/>
        <include name="**/*.src"/>
        <include name="**/*.csv"/>
        <include name="**/*.def"/>
        <include name="**/*.xml"/>
        <include name="**/*.html"/>
        <include name="**/*.htm"/>
        <include name="**/*.gz"/>
        <include name="**/*.properties"/>
        <include name="**/*.attributes"/>
        <include name="**/*.lm"/>
        <include name="**/resources/**"/>
      </fileset>
    </copy>
  </target>

  <target name="copy-junit-test-resources">
    <mkdir dir="${junit.test.classes}"/>
    <copy todir="${junit.test.classes}">
      <fileset dir="${junit.test.src}">
        <include name="**/*.txt"/>
        <include name="**/*.arff"/>
        <include name="**/*.src"/>
        <include name="**/*.csv"/>
        <include name="**/*.def"/>
        <include name="**/*.xml"/>
        <include name="**/*.html"/>
        <include name="**/*.htm"/>
        <include name="**/*.gz"/>
        <include name="**/*.properties"/>
        <include name="**/*.attributes"/>
        <include name="**/resources/**"/>
      </fileset>
    </copy>
  </target>

  <target name="clean">
    <!-- Delete the ${build} directory tree and dist ${jar} -->
    <delete dir="${build}"/>
    <delete verbose="true" failonerror="false">
      <fileset dir="${dist}" includes="${jar}*.jar"/>
    </delete>
  </target>

  <target name="build-clean" depends="clean,compile,copy-source-resources"/>

  <target name="build" depends="compile,copy-source-resources"/>

	<target name="build-junit-test" depends="compile-junit-test,copy-junit-test-resources"/>

  <!--target name="dist" depends="build-clean,test">
    <mkdir dir="${dist}"/>
    <jar destfile="${dist}/${jar}.${buildNumber}.jar"
         basedir="${classes}"
         excludes="**/Test*.class" />
    <exec executable="/bin/ln">
      <arg value="-sf"/>
      <arg value="${jar}.${buildNumber}.jar"/>
      <arg value="${dist}/${jar}.jar"/>
    </exec>
  </target-->

  <target name="svn-diff">
    <exec executable="svn" dir="${basedir}" outputproperty="svn.diff">
      <arg value="diff"/>
    </exec>
  </target>

  <target name="detect-change" depends="svn-diff">
    <condition property="change.detected">
      <not>
        <matches string="${svn.diff}" pattern="^$"/>
      </not>
    </condition>
  </target>

  <target name="should-dist" depends="detect-change">
    <condition property="should.dist">
      <or>
        <isset property="change.detected"/>
        <not>
          <available file="${dist}/${jar}.jar"/>
        </not>
      </or>
    </condition>
  </target>

  <target name="dist" depends="should-dist,build-clean,test" "if="should.dist">
    <mkdir dir="${dist}"/>
    <jar destfile="${dist}/${jar}.jar"
         basedir="${classes}"
         excludes="**/Test*.class" />
  </target>

  <target name="test" depends="init,doTest"/>

  <target name="clean-test" depends="clean,doTest"/>

  <target name="p4chkn" depends="build-clean,doTest"/>

  <target name="all" depends="build-clean,dist,javadoc,doTest"/>

  <target name="doTest" depends="build-junit-test">
    <mkdir dir="${reports}"/>
    <junit printsummary="on" haltonfailure="off" fork="on" showoutput="false"
      errorProperty="unittest.failed.flag"
      failureProperty="unittest.failed.flag">
      <classpath refid="project.class.path"/>
      <!--formatter type="plain"/-->
      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <batchtest fork="on" todir="${reports}">
        <fileset dir="${junit.test.src}">
          <include name="**/Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${reports}">
      <fileset dir="${reports}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${reports}/html"/>
    </junitreport>
    <fail if="unittest.failed.flag" message="Junit test failed."/>
  </target>

  <target name="javadoc" depends="build,build-junit-test">
    <delete dir="${docs}"/>
    <mkdir dir="${docs}"/>
    <javadoc
     destdir="${docs}"
     author="true"
     version="true"
     use="true"
     maxmemory="2000M"
     windowtitle="sd anttasks">

     <classpath refid="project.class.path"/>
     <packageset dir="${src}" defaultexcludes="yes">
       <include name="org/sd/**"/>
       <exclude name="org/sd/**/doc-files/**"/>
     </packageset>
     
     <!--packageset dir="${junit.test.src}" defaultexcludes="yes">
       <include name="org/sd/**"/>
       <exclude name="org/sd/**/doc-files/**"/>
     </packageset-->
     
     <doctitle><![CDATA[<h1>Semantic Discovery's Core Tools</h1>]]></doctitle>
     <bottom><![CDATA[<i>Copyright &#169; ${copyright.year} Semantic Discovery, Inc. All Rights Reserved.</i>]]></bottom>
     <tag name="todo" scope="all" description="To do:"/>
     <!-- link offline="true" href="http://java.sun.com/products/jdk/1.5/docs/api/" packagelistLoc="/tmp"/ -->
    </javadoc>
  </target>

</project>
