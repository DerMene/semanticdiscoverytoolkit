<project>
  <!--
    - This common file should be imported by a module's build.xml.
    -
    - This file contains common setup for modules with the following repository layout:
    -
    -   trunk
    -   |- core
    -      |- jars
    -         |- ext  // holds all external/3rd party jars
    -            |- *.jar
    -         |- modlib    // holds internal module jars (should NOT be referenced in libs.txt)
    -            |- *.jar  // updated and built by continuous integration server only
    -      |- antscripts
    -         common.xml  // this common build file
    -      |- deps
    -         |- <module*>.dep  // list of modules that <module> depends on (i.e. "module-b") for each <module> (checked in by build system)
    -         |- <module*>.lib  // list of libraries that <module> depends on (i.e. "runtime:lib-a.jar") for each <module> (checked in by build system)
    -         |- module-order.txt  // ordered list of modules from those with least to most dependencies
    -
    -   |- modules
    -      |- <module>  // name of module
    -         |- build.xml  // module's build imports common.xml
    -         |- deps
    -            |- <module>.dep  // developer-maintained list of modules that <module> depends on (i.e. "module-b")
    -            |- <module>.lib  // developer-maintained list of libraries that <module> depends on (i.e. "runtime:lib-a.jar")
    -         |- src
    -            |- java
    -               |- ...  // class directory structure for module code
    -            |- test    // all test code
    -               |- junit
    -                  |- ...  // parallel directory structure for classes. run Test*.java
    -         |- build  // generated by build, ignored by repository
    -            |- .in-progress  // temporary file present while verification is in progress
    -            |- classes  // compiled module classes
    -            |- junit-classes  // compiled junit classes
    -            |- docs
    -               |- junit-results
    -               |- javadocs
    -            |- dist  // fully built distribution of this module
    -               |- lib
    -                  |- *.jar
    -            |- webdist
    -               |- ...
    -               |- WEB-INF
    -                  |- web.xml
    -                  |- classes
    -                  |- lib
    -   |- testdata  // container for shared data used as testing resources across modules
    -      |- ...data...
    -
    - The following targets are defined:
    -   Top-level targets:
    -     verify : Verify integrity of modules depending on this module
    -     p4chkn : Clean, compile, test
    -     all : Compile, test, javadoc
    -     compile : Compiles all source and tests
    -     test : Run all tests and generate all reports
    -     javadoc : Build javadocs
    -     dist : Create full module distribution and update localdist area
    -     update-modlib : Update this module's modlib jar and deps
    -
    -   Cleaning targets:
    -     clean : Removes the entire build directory
    -     clean-all : clean local build, dist area, deploy area
    -
    -   Composite convenience targets:
    -     compile-test : compile, test
    -
    -   Subtargets:
    -     compile-source : Compiles only source code
    -     compile-junit-test : Compiles junit test code
    -     jar : Build jar
    -     run-junit : Run all junit tests
    -      run-junit-single : Runs a single specified junit test
    -
    -   Classpath targets:
    -     modcp : Create the module's minimal classpath file (build/.modclasspath)
    -     depcp : Create the module's dependencies classpath (build/.depclasspath)
    -     fullcp : Create the module's full classpath (build/.classpath)
    -     print-classpath : Echo the module's classpath.
    -
    - Customization:
    -   Environment variables:
    -     General: (Typically permanently set for your environment)
    -       CORE_ROOT : Relative path from a module to the "jars" root (default "../../core")
    -
    -     Specific: (Typically temporarily set for your environment)
    -       ANT_BUILD_NAME : Name of build.xml file (default "build.xml")
    -       MODULES_ROOT : Relative path from a module to the "modules" root (default "..")
    -       TEST_DATA_ROOT : Absolute path to the test data root (used by test implementations)
    - 
    -->

  <!-- load common properties -->
  <import file="common-properties.xml"/>

  <!--
    -  Set "has.modlib" iff this module has an associated jar that belongs in
    -  modlib. Note that the "top" module on which no other modules depend
    -  may not require a jar in modlib.
    -->
  <property name="has.modlib" value="true"/>
  <condition property="build.modlib">
    <istrue value="${has.modlib}"/>
  </condition>

  <!-- Identify current module -->
  <filelist id="current.module.dir" dir="." files="."/>
  <pathconvert property="current.module" refid="current.module.dir">
    <mapper type="regexp" from="^.+[/\\]([^/\\]+)$$" to="\1"/>
  </pathconvert>
  <!--echo message="current module=${current.module}"/-->

  <property name="jarfilename" value="${current.module}.jar"/>
  <property name="jaroutdir" value="${bldoutdir}/jar"/>
  <property name="jarfile" value="${jaroutdir}/${jarfilename}"/>

  <property name="classpathfile" value="${bldoutdir}/.classpath"/>
  <property name="inprogress.filename" value=".in-progress"/>
  <property name="in.progress.file" value="${bldoutdir}/${inprogress.filename}"/>
  <available property="is.in.progress" file="${in.progress.file}"/>

  <path id="anttasks">
    <pathelement location="${ext}/sd-anttasks.jar"/>
  </path>

  <taskdef name="deps" classname="org.sd.anttasks.DependenciesTask">
    <classpath refid="anttasks"/>
  </taskdef>
  

  <import file="loadlines.xml"/>


  <!--
    - Load module dependencies; specifically, identify
    -  (1) the modules that the current module depends on and
    -  (2) those modules on which the current module depends.
    -
    - The property "depsfile" points to the current module's moduleName.dep.
    - The property "deps" holds (space-delimitted) the moduleNames depended on.
    -
    - The property "libsfile" points to the current module's moduleName.lib.
    - The property "libs" holds (space-delimitted) the jars depended on.
    -
    - (2) backward dependencies:
    -   The property "modulesfile" points to the module-order.txt file.
    -   The property "ordered.deps" holds (space-delimitted) the ordered names of modules
    -   The property "depending.modules" holds (space-delimitted) the ordered names of modules that depend on current.module.
    -   The filelist refid "depending.module.builds" references all build files for all depending modules in order.
    - 
    - (1) forward dependencies:
    -   The path refid "module.full.classpath" has the full classpath including current module runtime and all forward dependencies.
    -   The fileset refid "distfiles" has all dependent jars for a full distribution of the current module.
    -
    -->
  <property name="depsfile" value="${depsroot}/${current.module}.dep"/>
  <!--loadlines srcfile="${depsfile}" property="deps" failonerror="false"/-->
  <property name="libsfile" value="${depsroot}/${current.module}.lib"/>
  <!--loadlines srcfile="${libsfile}" property="libs" failonerror="false"/-->

  <!-- Find modules that depend on this one (in the right order) -->
  <property name="modulesfile" value="${depsroot}/module-order.txt"/>
  <loadlines srcfile="${modulesfile}" property="ordered.deps" failonerror="true"/>
  <!--echo message="ordered.deps=${ordered.deps}"/-->

  <!--path id="modules.path">
    <filelist refid="required.modules"/>
  </path-->
  <!--echo message="MODULES-PATH: ${toString:modules.path}"/-->


  <!--
    - A module's classpath is formed by the following:
    -   Define the 'minimal.classpath' for a module as:
    -     classoutdir   // current compiled classes take precedence over jars
    -     locallib.jar  // first fallback for when compiled classes aren't present
    -     modlib.jar    // second fallback
    -     libs          // libraries this module directly relies on
    -
    -   Define the 'local.runtime.classpath' for a module as:
    -     junit.test.classes
    -     minimal.classpath
    -
    -   Define the 'dependency.classpath' as the 'minimal.classpath's (but without classoutdir) for those modules that this module depends on.
    -
    -   Define the 'module.full.classpath' for this module as
    -     local.runtime.classpath
    -     dependency.classpath
    -->

  <!-- set up local module classpath for the local runtime classpath -->
  <path id="module.tests.classpath">
     <pathelement location="${junit.test.classes}"/>
  </path>

  <target name="depcp">
    <mkdir dir="${modlib}"/>
    <deps
      cpid="module.full.classpath"
      distid="distfiles"
      depby="depending.modules"
      depbuildsid="depending.module.builds"

      testRefId="module.tests.classpath"
      moduleName="${current.module}"
      modulesRoot="${env.MODULES_ROOT}"
      libsRoot="${ext}"
      moduleJarsRoot="${modlib}"
      depsRoot="${depsroot}"
      modulesDirPattern="%m"
      localdist="${localdist}"
      classesPath="${classoutdir}"
      depsFilePattern="%m.dep"
      libsFilePattern="%m.lib"
      libsFilterRegex="^(runtime|modlib):.+$$"
      moduleJarPattern="%m.jar"
      failOnMissing="false"
      flatlibs="true"
      modorder="${ordered.deps}"
      antBuildName="${env.ANT_BUILD_NAME}"
      localDepsPath="${localdeps}"/>

    <path id="module.junit.classpath">
      <pathelement path="${toString:module.full.classpath}"/>
      <pathelement location="${ext}/junit.jar"/>
    </path>
  </target>

  <target name="fullcp" depends="depcp">
    <mkdir dir="${bldoutdir}"/>
    <echo message="${toString:module.full.classpath}" file="${classpathfile}"/>
  </target>

  <target name="print-classpath" depends="depcp">
    <echo message="CLASSPATH IS: ${toString:module.full.classpath}"/>
  </target>

  <target name="clean-dist" depends="clean,dist,update-modlib"/>

  <!-- For a distribution, copy module jar and full dependent jars into dist -->
  <target name="dist" depends="jar" description="Copy module and dependent jars into dist.">
    <mkdir dir="${distlibdir}"/>

    <!-- copy own jar file -->
    <copy todir="${distdir}" file="${jarfile}" failonerror="false"/>

    <!-- copy own non-test, non-build libs -->
    <copy todir="${distlibdir}" failonerror="false" flatten="true">
      <resources refid="distfiles"/>
    </copy>

    <!-- copy jar and deps to localdist -->
    <mkdir dir="${localdist}"/>
    <copy todir="${localdist}" flatten="true" failonerror="false">
      <fileset file="${jarfile}"/>
      <fileset dir="${localdeps}">
        <include name="*.dep"/>
        <include name="*.lib"/>
        <include name="*.conf"/>
      </fileset>
    </copy>

    <!-- create symbolic link with the prefix -->
    <exec executable="/bin/ln">
      <arg value="-sf"/>
      <arg value="${jarfilename}"/>
      <arg value="${localdist}/sd-${jarfilename}"/>
    </exec>
  </target>

  <target name="clean" description="Cleans out the build directories">
    <delete quiet="yes" file="${jar}"/>
    <delete dir="${bldoutdir}"/>
  </target>

  <target name="compile-source" unless="compile.skip" depends="depcp" description="Compile source code">
    <mkdir dir="${classoutdir}"/>
    <depend srcdir="${srcdir}" destdir="${classoutdir}" cache="${bldoutdir}/depcache">
      <include name="**/*.java"/>
    </depend>
    <javac destdir="${classoutdir}"
           debug="true"
           debuglevel="lines,vars,source"
           deprecation="true"
           fork="true"
           source="1.6"
           target="1.6">
      <classpath refid="module.full.classpath"/>
      <src path="${srcdir}"/>
      <compilerarg value="${default.compiler.args}"/>
      <include name="**/*.java"/>
    </javac>
    <copy todir="${classoutdir}">
      <fileset dir="." includes="*.properties"/>
    </copy>
    <!-- copy resources from the src-dir to classoutdir -->
    <copy todir="${classoutdir}">
      <fileset dir="${srcdir}">
        <exclude name="**/*.java"/>
        <exclude name="**/doc-files"/>
      </fileset>
    </copy>
  </target>

  <target name="compile-junit-test" depends="compile-source" if="has.junit.tests" description="Compile junit test code">
    <mkdir dir="${junit.test.classes}"/>

    <javac destdir="${junit.test.classes}"
           debug="true"
           debuglevel="lines,vars,source"
           deprecation="true"
           fork="true"
           source="1.6"
           target="1.6">
      <classpath refid="module.full.classpath"/>
      <src path="${junit.test}"/>
      <include name="**/*.java"/>
    </javac>

    <copy todir="${junit.test.classes}">
      <fileset dir="${junit.test}">
        <exclude name="**/*.java"/>
        <exclude name="**/doc-files"/>
      </fileset>
    </copy>
  </target>

  <target name="compile"
          unless="compile.skip"
          depends="compile-source,compile-junit-test"
          description="Compile source and test code"/>

  <target name="run-junit" depends="compile" if="has.junit.tests" description="Execute all junit tests">
    <mkdir dir="${junit.results}"/>

    <junit printsummary="on" haltonfailure="off" fork="on" showoutput="false"
      errorProperty="unittest.failed.flag"
      failureProperty="unittest.failed.flag">
      <classpath refid="module.junit.classpath"/>
      <!--formatter type="plain"/-->
      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <batchtest fork="on" todir="${junit.results}">
        <fileset dir="${junit.test}">
          <include name="**/${junit.tests}.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${junit.results}">
      <fileset dir="${junit.results}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.results}/html"/>
    </junitreport>
    <fail if="unittest.failed.flag" message="JUnit test failed."/>
  </target>
  
  <target name="run-junit-single" depends="compile-junit-test" description="Execute a single junit test">
    <mkdir dir="${junit.results}"/>

    <junit printsummary="on" haltonfailure="off" fork="on" showoutput="false"
      errorProperty="unittest.failed.flag"
      failureProperty="unittest.failed.flag">
      <classpath refid="module.full.classpath"/>
      <!--formatter type="plain"/-->
      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <test name="${classname}" haltonfailure="no" outfile="${junit.results}">
        <formatter type="xml"/>
      </test>
    </junit>
    <junitreport todir="${junit.results}">
      <fileset dir="${junit.results}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${junit.results}/html"/>
    </junitreport>
    <fail if="unittest.failed.flag" message="JUnit test failed."/>
  </target>

  <target name="test" depends="run-junit"
          description="Execute all tests"/>

  <target name="jar" depends="compile" if="build.modlib">
    <mkdir dir="${jaroutdir}"/>
    <jar jarfile="${jarfile}">
      <!-- NOTE: target 'compile' has already copied resources to the classoutdir -->
      <fileset dir="${classoutdir}">
        <exclude name="**/*.properties"/>
      </fileset>
    </jar>
  </target>

  <target name="javadoc" depends="compile" description="Generate the javadocs">
    <mkdir dir="${apidocs}"/>
    <javadoc destdir="${apidocs}"
             packagenames="${api.packages}"
             breakiterator="yes"
             maxmemory="500m"
             failonerror="false">
      <fileset dir="${srcdir}" defaultexcludes="yes">
        <include name="**/*.java"/>
      </fileset>
      <classpath>
        <path refid="module.full.classpath"/>
      </classpath>
    </javadoc>
  </target>

  <target name="curmod" description="Echo current module name">
    <echo message="CURRENT MODULE: ${current.module}"/>
  </target>

  <!-- Show modules that depend on this module -->
  <target name="showdeps" depends="depcp" description="Show modules depending on this module">
    <echo message="${current.module} NEEDED-BY '${depending.modules}'"/>
  </target>

  <!-- Clean-test modules depending on this module. -->
  <target name="verify" depends="depcp,clean,compile,test,dist" description="Clean-test this module and each of the modules depending on it">
    <delete>
      <fileset dir="${env.MODULES_ROOT}" includes="*/${in.progress.file}"/>
    </delete>

    <!-- copy own junit results to composite-results -->
    <mkdir dir="${bldoutdir}/composite-results/junit/${current.module}"/>
    <copy todir="${bldoutdir}/composite-results/junit/${current.module}">
      <fileset dir="${junit.results}"/>
    </copy>

    <!-- build depending modules -->
    <sequential>
      <subant antfile="${env.ANT_BUILD_NAME}" target="_doverify">
        <!--property name="bldoutdir" value="${bldoutdir}/verify"/-->
        <property name="verify.base" value="${basedir}/${bldoutdir}"/>
        <filelist refid="depending.module.builds"/>
      </subant>
    </sequential>

    <delete>
      <fileset dir="${env.MODULES_ROOT}" includes="*/${in.progress.file}"/>
    </delete>
  </target>

  <target name="_doverify" unless="is.in.progress" depends="clean,compile,test" description="(Internal auxiliary -- call 'verify' instead)">
    <mkdir dir="${verify.base}/${current.module}"/>
    <copy todir="${verify.base}/composite-results/junit/${current.module}">
      <fileset dir="${junit.results}"/>
    </copy>
  </target>

  <target name="update-modlib" depends="jar" if="build.modlib" description="Copy module's jar to modlib.">
    <copy todir="${modlib}" file="${jarfile}"/>
    <copy todir="${depsroot}" flatten="true" failonerror="false">
      <fileset dir="${localdeps}">
        <include name="*.dep"/>
        <include name="*.lib"/>
        <include name="*.conf"/>
      </fileset>
    </copy>
  </target>

  <target name="all"
          depends="compile,test,javadoc,jar,dist"
          description="Performs a build; runs tests; builds javadocs, jar, dist"/>

  <target name="p4chkn" depends="clean,run-junit,dist" description="Executes targets required to pass prior to checkin"/>
  <target name="p4checkin" depends="p4chkn" description="Because typing p4chkn requires to much thinking on my part ;)"/>

  <target name="clean-localdist" description="clean localdist area">
    <delete dir="${localdist}"/>
  </target>

  <target name="clean-all" depends="clean,clean-localdist" description="clean local build, dist area, deploy area"/>

  <target name="add-to-jar" if="destjarfile">
    <jar destfile="${destjarfile}" basedir="${classoutdir}" update="true"/>
  </target>

</project>
